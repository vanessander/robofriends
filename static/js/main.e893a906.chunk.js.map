{"version":3,"sources":["components/card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","serviceWorkerRegistration.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","rel","width","height","CardList","robots","map","item","i","SearchBox","searchTerm","onSearch","type","placeholder","onChange","Scroll","children","style","overflowY","border","ErrorBoundry","props","state","hasError","this","setState","React","Component","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchedRobots","filter","robot","toLowerCase","includes","searchField","handleSearch","error","isPending","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","res","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRequest","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e893a906.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?300x300`} alt=\"Robot\" \r\n                rel=\"pre-connect\" width=\"300\" height=\"300\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {robots.map(function(item, i) {\r\n                return (\r\n                    <Card key={`${i}x`} id={item.id} name={item.name} email={item.email} />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\n\r\nconst SearchBox = ({ searchTerm, onSearch }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                aria-label=\"Search Robots\"\r\n                type=\"search\" \r\n                placeholder=\"search for robots\" \r\n                className=\"pa2 ba b--green bg-lightest-blue\"\r\n                onChange={onSearch}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\nimport './Scroll.css'\r\n\r\nconst Scroll = ({ children }) => {\r\n    return (\r\n        <div className=\"scroller\" style={{ overflowY: 'scroll', border: '2px solid black', height: '500px' }}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.hasError ? (\r\n                <h1>Oooops. That is not good</h1>\r\n            ) : (\r\n                this.props.children\r\n            )\r\n        )\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    handleSearch: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n}\r\n\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const searchedRobots = this.props.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n    })\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox searchTerm={this.props.searchField} onSearch={this.props.handleSearch}/>\r\n\r\n          {this.props.error && <h1>Something went wrong ...</h1>}\r\n\r\n          {this.props.isPending ? (\r\n            <h1>Loading...</h1>\r\n          ) : (\r\n            <Scroll>\r\n              <ErrorBoundry>\r\n                <CardList robots={searchedRobots} />\r\n              </ErrorBoundry>\r\n            </Scroll>\r\n          )}\r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(res => res.json())\r\n      .then(data => dispatch({\r\n          type: REQUEST_ROBOTS_SUCCESS,\r\n          payload: data\r\n      }))\r\n      .catch(err => dispatch({\r\n          type: REQUEST_ROBOTS_FAILED,\r\n          payload: err\r\n      }))\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport function searchRobots(state=initialStateSearch, action={}) {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCHFIELD:\r\n            return {\r\n                ...state,\r\n                searchField: action.payload\r\n            };\r\n\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nconst initialStateRequest = {\r\n    isPending: false,\r\n    error: false,\r\n    robots: []\r\n}\r\n\r\nexport function requestRobots(state=initialStateRequest, action={}) {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {\r\n                ...state,\r\n                error: false,\r\n                isPending: true\r\n            };\r\n        \r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isPending: false,\r\n                error: false,\r\n                robots: action.payload\r\n            };\r\n        \r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {\r\n                ...state,\r\n                isPending: false,\r\n                error: true\r\n            };\r\n        \r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\r\n// import { createLogger } from 'redux-logger';\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport App from './containers/App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\n// const logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({\r\n  searchRobots,\r\n  requestRobots\r\n})\r\n\r\nconst store = \r\n  createStore(rootReducer,\r\n     applyMiddleware(thunkMiddleWare));\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}